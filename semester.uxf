<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>924</x>
      <y>312</y>
      <w>198</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Node
--
- nodeData : int
- nodePointer : IntNode*
--
+ getNodeData()
+ getNodePointer : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : init
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : init

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1170</x>
      <y>300</y>
      <w>174</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromindex(int index) : int
+ getSize() : int

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1224</x>
      <y>468</y>
      <w>294</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int
--
+ Array() : constructor
+ Array(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() : int
+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1158</x>
      <y>504</y>
      <w>78</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>930</x>
      <y>468</y>
      <w>234</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData() : Void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1116</x>
      <y>372</y>
      <w>66</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1218</x>
      <y>612</y>
      <w>252</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+List&lt;Type&gt;() : constructor
+List&lt;Type&gt;(constList&lt;Type&gt;&amp;source): copy constructor
+~List&lt;Type&gt;() : destructor

+addAtIndex(int index, Type value) : void
+addFront(Type value): void
+addEnd(Type value): void
+remove(int index) : Type
+setAtIndex(int index, Type data) : Type
+getFromIndex(int index, Type data) : Type
+contains(Type data) : bool
+getSize(const) : int
+getFront() const : Node&lt;Type&gt; *
+getEnd() const : Node&lt;Type&gt; *


bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1158</x>
      <y>558</y>
      <w>72</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>100.0;210.0;50.0;210.0;50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1014</x>
      <y>582</y>
      <w>18</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>906</x>
      <y>624</y>
      <w>258</w>
      <h>186</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : int
- previous : biDirectionNode&lt;Type&gt; *
- next : biDirectionNode&lt;Type&gt; *
--

+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; 
	* previous, BiDirectionalNode&lt;Type&gt; * next) : constructor

+ getNodeData() : Type
+ setNodeData() : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void
+ getNextNode(BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>930</x>
      <y>858</y>
      <w>216</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>/DOUBLYLINKEDLIST&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+add(Type value) : void
+ remove(int index) : Type

+ getSize() const : int
+ getFront() : const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *
+ setFront() : BiDirectionalNode&lt;Type&gt; * front
+ setEnd() : BiDirectionalNode&lt;Type&gt; * end
+ setSize() const : int

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1080</x>
      <y>990</y>
      <w>60</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1044</x>
      <y>990</y>
      <w>18</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>966</x>
      <y>990</y>
      <w>60</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>978</x>
      <y>1056</y>
      <w>144</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type. *
-end: BiDirectionalNode&lt;Type&gt; *
-size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ push(Type data) : void
+ pop(): Type
+ peek() : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1128</x>
      <y>1026</y>
      <w>180</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>Model :: CircularlyLinkedList&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type&gt; *
-end: BiDirectionalNode&lt;Type&gt; *
-size : int
--
+add(Type) : void
+ remove(int index) : Type

+addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>786</x>
      <y>1026</y>
      <w>186</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type. *
-end: BiDirectionalNode&lt;Type&gt; *
-size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue(): Type
+ peek() : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1026</x>
      <y>804</y>
      <w>30</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1230</x>
      <y>852</y>
      <w>246</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>SimpleClass</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1140</x>
      <y>912</y>
      <w>102</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>318</x>
      <y>294</y>
      <w>294</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData: Type (inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; * 
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--

+ BinarySerachTreeNode() : cosntructor
+ BinarySearchTreeNode(Type data) : cnstructor

+ getRootPointer() :BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; * 
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>606</x>
      <y>366</y>
      <w>330</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;530.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>312</x>
      <y>504</y>
      <w>258</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree &lt;Type&gt;
--
- root : BinarySearchtreeNode&lt;Type&gt; *
- size : int (inherited)
- height : int (inherited)
- complete :bool (inherited)
- balanced : bool (inherited)

--
+BinarySearchTree() : constructor
+ ~BinarySearchTree(): destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ getSize() : int

- calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
- inOrderTraversal(binarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinaryearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BinaryearchTreeNode&lt;Type&gt; *) : void
- removeNode(BinarySearchTreeNOdeType&gt; *) : void

+ printToFile(Type): void
+ insert(Type): void
+ contains(Type): bool
+ remove(Type): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>426</x>
      <y>462</y>
      <w>30</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>504</y>
      <w>252</w>
      <h>234</h>
    </coordinates>
    <panel_attributes>/AbstractClass/
--
- size : int
- height : int
- complete :bool
- balanced : bool
-
+ Tree() : construcctor
+ ~Tree() : destructor
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ is Balanced() : bool

+ setSize(int sie) : void
+ setHeight(int height) : void
+ setComplete(bool complete) : void
+ setBalanced(bool blanced): void


- inOrderTraversal() : void
- preOrderTraversal() : void
- postOrderTraversal() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>564</x>
      <y>594</y>
      <w>48</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
</diagram>

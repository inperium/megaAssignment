<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>756</x>
      <y>208</y>
      <w>132</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>Node
--
- nodeData : int
- nodePointer : IntNode*
--
+ getNodeData()
+ getNodePointer : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : init
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : init

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1036</x>
      <y>200</y>
      <w>116</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromindex(int index) : int
+ getSize() : int

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>956</x>
      <y>312</y>
      <w>196</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int
--
+ Array() : constructor
+ Array(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() : int
+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>912</x>
      <y>336</y>
      <w>52</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>760</x>
      <y>312</y>
      <w>156</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData() : Void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>884</x>
      <y>248</y>
      <w>160</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;380.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>952</x>
      <y>408</y>
      <w>168</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+List&lt;Type&gt;() : constructor
+List&lt;Type&gt;(constList&lt;Type&gt;&amp;source): copy constructor
+~List&lt;Type&gt;() : destructor

+addAtIndex(int index, Type value) : void
+addFront(Type value): void
+addEnd(Type value): void
+remove(int index) : Type
+setAtIndex(int index, Type data) : Type
+getFromIndex(int index, Type data) : Type
+contains(Type data) : bool
+getSize(const) : int
+getFront() const : Node&lt;Type&gt; *
+getEnd() const : Node&lt;Type&gt; *


bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>912</x>
      <y>372</y>
      <w>48</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>100.0;210.0;50.0;210.0;50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>816</x>
      <y>388</y>
      <w>12</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>744</x>
      <y>416</y>
      <w>172</w>
      <h>124</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : int
- previous : biDirectionNode&lt;Type&gt; *
- next : biDirectionNode&lt;Type&gt; *
--

+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; 
	* previous, BiDirectionalNode&lt;Type&gt; * next) : constructor

+ getNodeData() : Type
+ setNodeData() : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void
+ getNextNode(BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>760</x>
      <y>572</y>
      <w>144</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>/DOUBLYLINKEDLIST&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+add(Type value) : void
+ remove(int index) : Type

+ getSize() const : int
+ getFront() : const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *
+ setFront() : BiDirectionalNode&lt;Type&gt; * front
+ setEnd() : BiDirectionalNode&lt;Type&gt; * end
+ setSize() const : int

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>860</x>
      <y>660</y>
      <w>40</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>836</x>
      <y>660</y>
      <w>12</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>784</x>
      <y>660</y>
      <w>40</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>704</y>
      <w>96</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type. *
-end: BiDirectionalNode&lt;Type&gt; *
-size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ push(Type data) : void
+ pop(): Type
+ peek() : Type

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>892</x>
      <y>684</y>
      <w>120</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Model :: CircularlyLinkedList&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type&gt; *
-end: BiDirectionalNode&lt;Type&gt; *
-size : int
--
+add(Type) : void
+ remove(int index) : Type

+addAtIndex(int index, Type data) : void

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>664</x>
      <y>684</y>
      <w>124</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type. *
-end: BiDirectionalNode&lt;Type&gt; *
-size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue(): Type
+ peek() : Type

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>824</x>
      <y>536</y>
      <w>20</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>960</x>
      <y>568</y>
      <w>164</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
-front: BiDIrectionalNode&amp;lt;Type&amp;gt; *
-end : BiDIrectionalNode&amp;lt;Type&amp;gt; *
-size : int
--
+DoubleList() : init
+~DoubleList() : deinit


+ add() : void
+remove(int) : Type

+addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addAtIndexFast(int index, Type data) : void

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>900</x>
      <y>608</y>
      <w>68</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>352</x>
      <y>196</y>
      <w>196</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData: Type (inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; * 
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--

+ BinarySerachTreeNode() : cosntructor
+ BinarySearchTreeNode(Type data) : cnstructor

+ getRootPointer() :BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; * 
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>544</x>
      <y>244</y>
      <w>220</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;530.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>348</x>
      <y>336</y>
      <w>172</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree &lt;Type&gt;
--
- root : BinarySearchtreeNode&lt;Type&gt; *
- size : int (inherited)
- height : int (inherited)
- complete :bool (inherited)
- balanced : bool (inherited)

--
+BinarySearchTree() : constructor
+ ~BinarySearchTree(): destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ getSize() : int

- calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
- inOrderTraversal(binarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinaryearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BinaryearchTreeNode&lt;Type&gt; *) : void
- removeNode(BinarySearchTreeNOdeType&gt; *) : void

+ printToFile(Type): void
+ insert(Type): void
+ contains(Type): bool
+ remove(Type): void

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>424</x>
      <y>308</y>
      <w>20</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>540</x>
      <y>336</y>
      <w>152</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>/Model :: Tree&lt;Type&gt;/
--
- size : int
- height : int
- complete :bool
- balanced : bool
-
+ Tree() : construcctor
+ ~Tree() : destructor
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ is Balanced() : bool

+ setSize(int sie) : void
+ setHeight(int height) : void
+ setComplete(bool complete) : void
+ setBalanced(bool blanced): void


- inOrderTraversal() : void
- preOrderTraversal() : void
- postOrderTraversal() : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>516</x>
      <y>412</y>
      <w>32</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>28</x>
      <y>384</y>
      <w>296</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Model :: AVLTree&lt;Type&gt;
--
#root : BinarySeachTreeNode&lt;Type&gt; *
--
+AVLTree() : init
+~AVLTree() : de-init

-leftRotation(BinarySearchTreeNode&lt;Type&gt;* parent) : BinarySearchTreeNode&amp;lt;Type&amp;gt;*
-rightRotation(BinarySearchTreeNode&lt;Type&gt;* first) : BinarySearchTreeNode&amp;lt;Type&amp;gt;*
-leftRightRotation(BinarySearchTreeNode&lt;Type&gt;* first) : BinarySearchTreeNode&amp;lt;Type&amp;gt;*
-rightLeftRotation(BinarySearchTreeNode&lt;Type&gt;* first) : BinarySearchTreeNode&amp;lt;Type&amp;gt;*

-insertNode( BinarySearchTreeNode&lt;Type&gt; * Type value) :  BinarySearchTreeNode&amp;lt;Type&amp;gt;*
-removeNode( BinarySearchTreeNode&lt;Type&gt; * Type value) :  BinarySearchTreeNode&amp;lt;Type&amp;gt;*
-balanceSubTree( BinarySearchTreeNode&lt;Type&gt;*) :  BinarySearchTreeNode&amp;lt;Type&amp;gt;*
-heightDifference( BinarySearchTreeNode&lt;Type&gt;* parent) :int

+remove(Type) : void
+insert(Type) : void


bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>760</x>
      <y>64</y>
      <w>120</w>
      <h>124</h>
    </coordinates>
    <panel_attributes>List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt;; *
- end : Node&lt;Type&gt;; *
--
+List&lt;Type&gt;;() : constructor
+List&lt;Type&gt;;(constList&amp;lt;Type&amp;gt;&amp;amp;source): copy constructor
+~List&lt;Type&gt;;() : destructor

+addAtIndex(int index, Type value) : void
+addFront(Type value): void
+addEnd(Type value): void
+remove(int index) : Type
+setAtIndex(int index, Type data) : Type
+getFromIndex(int index, Type data) : Type
+contains(Type data) : bool
+getSize(const) : int
+getFront() const : Node&lt;Type&gt;; *
+getEnd() const : Node&lt;Type&gt;; *

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>816</x>
      <y>184</y>
      <w>12</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>504</x>
      <y>524</y>
      <w>100</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>HashNode&lt;Type&gt;
--
- data : Type
- key : long
--
+ HashNode() : init
+ HashNode(Type data) : init

+ getData() : Type
+ const getKey : long
+ setData(Type data)  : void
bg=#000</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>548</x>
      <y>344</y>
      <w>220</w>
      <h>188</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>530.0;10.0;410.0;10.0;410.0;400.0;10.0;400.0;10.0;450.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>392</x>
      <y>636</y>
      <w>236</w>
      <h>124</h>
    </coordinates>
    <panel_attributes>Model :: HashTable&lt;Type&gt;
--
- capacity : long
- size : long
- efficiencyPercentage : double
- hashTableStorage : HashNode&lt;Type&gt; **
- isPrime(long sampleNumber) : bool
- resize() : void
- nextPrime() : long
- findPosition(HashNode&lt;Type&gt; * data) : long
- handleCollision(HashNode&lt;Type&gt; * data, long currentPosition) : long

--
+ HashTable() : init
+ ~HashTable() : deinit
+ add(Type data) : void
+ remove(Type data) : bool
+ displayContents() : void
+ setSize() : long
bg=#681356</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>548</x>
      <y>592</y>
      <w>20</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>144</x>
      <y>588</y>
      <w>216</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Model :: Graph&lt;Type&gt;;
--
- MAXIMUM = 20 : static const int
- adjacencyMatrix[MAXIMUM][MAXIMUM]: bool 
- graphData[MAXIMUM] : Type 
- vertexCount : int 
- depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex, bool markedVerticies[]) : void
--
 + Graph();
 + ~Graph();
    
 + addVertex(const Type&amp;amp; value): void
 + addEdge(int source, int target): void
 + removeEdge(int source, int target): void
 + Type&amp;amp; operator [] (int vertex)
 + Type operator [] (int vertex) const
 + size() const : int
 + areConnected(int source, int target)const : bool
 + std::set&lt;int&gt; neighbors(int vertex) const : std::set&lt;int&gt;;
 + depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex): void 
 + breadthFirstTraversal(Graph&lt;Type&gt; graph, int vertex) :void 

bg=#f0983</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>320</x>
      <y>444</y>
      <w>36</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
</diagram>

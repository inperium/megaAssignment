<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>360</x>
      <y>20</y>
      <w>330</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>Node
--
- nodeData : int
- nodePointer : IntNode*
--
+ getNodeData()
+ getNodePointer : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : init
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : init

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>770</x>
      <y>0</y>
      <w>290</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromindex(int index) : int
+ getSize() : int

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>280</y>
      <w>490</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int
--
+ Array() : constructor
+ Array(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() : int
+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>340</y>
      <w>130</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>370</x>
      <y>280</y>
      <w>390</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData() : Void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>680</x>
      <y>120</y>
      <w>110</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>850</x>
      <y>520</y>
      <w>420</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+List&lt;Type&gt;() : constructor
+List&lt;Type&gt;(constList&lt;Type&gt;&amp;source): copy constructor
+~List&lt;Type&gt;() : destructor

+addAtIndex(int index, Type value) : void
+addFront(Type value): void
+addEnd(Type value): void
+remove(int index) : Type
+setAtIndex(int index, Type data) : Type
+getFromIndex(int index, Type data) : Type
+contains(Type data) : bool
+getSize(const) : int
+getFront() const : Node&lt;Type&gt; *
+getEnd() const : Node&lt;Type&gt; *


bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>430</y>
      <w>120</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>100.0;210.0;50.0;210.0;50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>470</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>540</y>
      <w>430</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : int
- previous : biDirectionNode&lt;Type&gt; *
- next : biDirectionNode&lt;Type&gt; *
--

+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; 
	* previous, BiDirectionalNode&lt;Type&gt; * next) : constructor

+ getNodeData() : Type
+ setNodeData() : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void
+ getNextNode(BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>370</x>
      <y>930</y>
      <w>360</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>/DOUBLYLINKEDLIST&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
Non Virtual Methods
+ getSize() const : int
+ getFront() : const : BiDirectionalNode&lt;Type&gt; *
+getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+add(Type value)
+ remove(int)

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>1150</y>
      <w>100</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>1150</y>
      <w>30</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>1150</y>
      <w>100</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>450</x>
      <y>1260</y>
      <w>240</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Stack
--

--
+ add(Type data) : void
+ remove(int index) : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>1210</y>
      <w>300</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
- front : BiDirectionalNode *
--

+add(Type) : void
+addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>130</x>
      <y>1210</y>
      <w>310</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Queue
--

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>530</x>
      <y>840</y>
      <w>50</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
